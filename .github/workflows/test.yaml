name: Tests

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
    contents: read

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        args: --timeout=5m
        version: v2.3.0

  validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Validate
      run: make validate

  tests:
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Run unit tests
      run: make test-unit

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./cover.out
        flags: unit

  tests-e2e:
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Install Ginkgo
      run: go install github.com/onsi/ginkgo/v2/ginkgo

    - name: Install helm
      uses: azure/setup-helm@v4.3.0

    - name: Install k3d and kubectl
      run: |
        wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
        k3d version

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

    - name: Setup Kubernetes (k3d)
      env:
        REPO_NAME: k3k-registry
        REPO_PORT: 12345
      run: |
        echo "127.0.0.1 ${REPO_NAME}" | sudo tee -a /etc/hosts

        k3d registry create ${REPO_NAME} --port ${REPO_PORT}
        
        k3d cluster create k3k --servers 3 \
          -p "30000-30010:30000-30010@server:0" \
          --registry-use k3d-${REPO_NAME}:${REPO_PORT}
        
        kubectl cluster-info
        kubectl get nodes

    - name: Set coverage environment
      run: |
        mkdir ${{ github.workspace }}/covdata
        
        echo "COVERAGE=true" >> $GITHUB_ENV
        echo "GOCOVERDIR=${{ github.workspace }}/covdata" >> $GITHUB_ENV

    - name: Setup K3k
      env:
        REPO: k3k-registry:12345
      run: |
        echo "127.0.0.1 k3k-registry" | sudo tee -a /etc/hosts

        make build
        make package
        make push

        # add k3kcli to $PATH
        echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

        VERSION=$(make version)
        k3d image import ${REPO}/k3k:${VERSION} -c k3k --verbose
        k3d image import ${REPO}/k3k-kubelet:${VERSION} -c k3k --verbose

        make install
        
        echo "Wait for K3k controller to be available"
        kubectl wait -n k3k-system pod --for condition=Ready -l "app.kubernetes.io/name=k3k" --timeout=5m

    - name: Check k3kcli
      run: k3kcli -v

    - name: Run e2e tests
      run: |
        REPO: k3k-registry:12345
        VERSION=$(make version)

        make test-e2e

    - name: Convert coverage data
      run: go tool covdata textfmt -i=${GOCOVERDIR} -o ${GOCOVERDIR}/cover.out
    
    - name: Upload coverage reports to Codecov (controller)
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${GOCOVERDIR}/cover.out
        flags: controller

    - name: Upload coverage reports to Codecov (e2e)
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./cover.out
        flags: e2e

    - name: Archive k3s logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-k3s-logs
        path: /tmp/k3s.log

    - name: Archive k3k logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-k3k-logs
        path: /tmp/k3k.log

  tests-cli:
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Install Ginkgo
      run: go install github.com/onsi/ginkgo/v2/ginkgo
    
    - name: Set coverage environment
      run: |
        mkdir ${{ github.workspace }}/covdata
        
        echo "COVERAGE=true" >> $GITHUB_ENV
        echo "GOCOVERDIR=${{ github.workspace }}/covdata" >> $GITHUB_ENV
    
    - name: Build and package
      run: |
        make build
        make package

        # add k3kcli to $PATH
        echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

    - name: Check k3kcli
      run: k3kcli -v

    - name: Run cli tests
      run: make test-cli

    - name: Convert coverage data
      run: go tool covdata textfmt -i=${{ github.workspace }}/covdata -o ${{ github.workspace }}/covdata/cover.out

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ github.workspace }}/covdata/cover.out
        flags: cli

    - name: Archive k3s logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cli-k3s-logs
        path: /tmp/k3s.log

    - name: Archive k3k logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cli-k3k-logs
        path: /tmp/k3k.log
